#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("util.star", "is_unique", "group_by_one", "to_build_args")
#@ load("helpers.star", "ci_image_tag", "ci_dep_image", "skip_ci_condition")

#@ def checks_job(dep):
name: #@ dep.name + "-checks"
needs: [prepare]
runs-on: ubuntu-18.04
if: #@ skip_ci_condition()
outputs:
  step_start: ${{ steps.buildevents.outputs.step_start }}
#@yaml/text-templated-strings
steps:
  - name: RECORD STEP START
    id: buildevents
    run: |
      echo "::set-output name=step_start::$(date +%s)"
  - name: CHECKOUT REPOSITORY
    uses: actions/checkout@v2
  - name: RUN CHECKS
    uses: docker/build-push-action@v1
    with:
      username: _json_key
      password: ${{ secrets.GCR_JSON_KEY }}
      registry: eu.gcr.io
      repository: cf-rabbitmq-core/ci-(@= dep.name @)
      dockerfile: ci/dockerfiles/ci-dep
      #@ build_args = {}
      #@ build_args["IMAGE_TAG"] = ci_image_tag()
      #@ build_args["BUILDEVENT_APIKEY"] = '${{ secrets.HONEYCOMB_API_KEY }}'
      #@ build_args["project"] = dep.name
      build_args: #@ to_build_args(build_args)
      tags: (@= ci_image_tag() @)
#@ end

#@ def ct_suites_job(dep, group):
name: #@ dep.name + "-ct-" + group["name"]
needs:
  - prepare
  - #@ dep.name + "-checks"
runs-on: ubuntu-18.04
if: #@ skip_ci_condition()
#@yaml/text-templated-strings
steps:
  - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
    with:
      service_account_key: ${{ secrets.GCR_JSON_KEY }}
      export_default_credentials: true
  - name: PULL IMAGE
    run: |
      gcloud auth configure-docker
      docker pull (@= ci_dep_image(dep.name) @)
  #@ for suite in group["suites"]:
  - name: #@ "RUN ct-" + suite
    run: |
      mkdir ct-(@= suite @)-logs && chmod 777 ct-(@= suite @)-logs
      docker run \
        --env project=(@= dep.name @) \
        --env CT_SUITE=(@= suite @) \
        --env GITHUB_RUN_ID=${{ github.run_id }} \
        --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
        --volume ${PWD}/ct-(@= suite @)-logs:/workspace/ct-logs \
        (@= ci_dep_image(dep.name) @) \
        /workspace/rabbitmq/ci/scripts/ct-suite.sh
  - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
    #! https://github.com/marketplace/actions/upload-artifact
    uses: actions/upload-artifact@v2-preview
    #! For whatever reason, "if: steps.(@= suite @).outcome == 'failure'" never executes,
    #! so just run always
    if: always()
    with:
      name: (@= dep.name @)-ct-(@= suite @)-logs
      path: "ct-(@= suite @)-logs/*-ct-logs-*.tar.xz"
  #@ if data.values.erlang_version == data.values.erlang_versions[0]:
  #@ for version in data.values.secondary_umbrella_gitrefs:
  #@   logs_dir = 'ct-{}-logs-{}'.format(suite, version)
  - name: #@ "RUN ct-{} [mixed {}]".format(suite, version)
    run: |
      mkdir (@= logs_dir @) && chmod 777 (@= logs_dir @)
      docker run \
        --env project=(@= dep.name @) \
        --env CT_SUITE=(@= suite @) \
        --env GITHUB_RUN_ID=${{ github.run_id }} \
        --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
        --env SECONDARY_UMBRELLA_VERSION=(@= version @) \
        --volume ${PWD}/(@= logs_dir @):/workspace/ct-logs \
        (@= ci_dep_image(dep.name) @) \
        /workspace/rabbitmq/ci/scripts/ct-suite.sh
  - name: #@ 'ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed {}]'.format(version)
    #! https://github.com/marketplace/actions/upload-artifact
    uses: actions/upload-artifact@v2-preview
    #! For whatever reason, "if: steps.(@= suite @).outcome == 'failure'" never executes,
    #! so just run always
    if: always()
    with:
      name: (@= dep.name @)-ct-(@= suite @)-logs-mixed-(@= version @)
      path: "(@= logs_dir @)/*-ct-logs-*.tar.xz"
  #@ end
  #@ end
  #@ end
#@ end

#@ def collect_job(dep):
name: #@ dep.name
needs: #@ [dep.name + "-checks"] + [dep.name + "-ct-" + group["name"] for group in group_by_one(dep.suites)]
runs-on: ubuntu-18.04
if: #@ skip_ci_condition()
#@yaml/text-templated-strings
steps:
  - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
    with:
      service_account_key: ${{ secrets.GCR_JSON_KEY }}
      export_default_credentials: true
  - name: RECORD STEP FINISH
    run: |
      gcloud auth configure-docker
      docker pull (@= ci_dep_image(dep.name) @)
      docker run \
        --env project=(@= dep.name @) \
        --env GITHUB_RUN_ID=${{ github.run_id }} \
        --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
        --env STEP_START=${{ needs.(@= dep.name @)-checks.outputs.step_start }} \
        (@= ci_dep_image(dep.name) @) \
        /workspace/rabbitmq/ci/scripts/collect.sh
#@ end